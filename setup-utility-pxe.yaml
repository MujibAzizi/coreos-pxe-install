- name: Set up the Arch Linux utility machine to be a PXE server for CoreOS
  hosts: utility
  sudo: yes
  tasks:

  - name: Ensure packages installed
    pacman:
      name: dnsmasq,bind-tools,darkhttpd,mime-types
      state: present

  - name: Create /tftpboot directory structure, and /srv/http/coreos directory
    file:
      path: "{{ item }}"
      state: directory
    with_items:
    - /srv/http/coreos
    - /tftpboot/pxelinux.cfg
    - /tftpboot/syslinux

  - name: get PXELINUX binaries
    #TODO: make version a variable
    #TODO: when v2 out, use unarchive src=https://
    get_url:
      url: "https://www.kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.tar.gz"
      dest: "/tftpboot/syslinux/syslinux-6.03.tar.gz"

  - name: unarchive PXELINUX binaries
    unarchive:
      copy: no
      dest: /tftpboot/syslinux
      src: /tftpboot/syslinux/syslinux-6.03.tar.gz
      creates: /tftpboot/syslinux/syslinux-6.03

  - name: Copy PXELINUX binaries to /tftpboot
    command: "cp /tftpboot/syslinux/syslinux-6.03/{{ item }} /tftpboot/"
    args:
      creates: /tftpboot/lpxelinux.0
    with_items:
    - bios/core/lpxelinux.0
    - bios/com32/elflink/ldlinux/ldlinux.c32

  - name: Ensure CoreOS binaries downloaded
    #TODO: allow channels other than alpha
    #TODO: when Ansible 2.0 is out, use checksum to see if files changed and need re-downloading
    #TODO: check signatures
    get_url:
      url: "http://alpha.release.core-os.net/amd64-usr/current/{{ item }}"
      dest: "/srv/http/coreos/{{ item }}"
    with_items:
    - coreos_production_pxe.vmlinuz
    - coreos_production_pxe.vmlinuz.sig
    - coreos_production_pxe_image.cpio.gz
    - coreos_production_pxe_image.cpio.gz.sig
    - coreos_production_image.bin.bz2
    - coreos_production_image.bin.bz2.sig

  - name: get CoreOS signing key
    get_url:
      url: "https://coreos.com/security/image-signing-key/CoreOS_Image_Signing_Key.asc"
      dest: "/srv/http/coreos/CoreOS_Image_Signing_Key.asc"

  - include: roles/utility/tasks/config-files.yaml
